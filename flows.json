[
    {
        "id": "2ad3457834090f9e",
        "type": "tab",
        "label": "Smart Door System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6acd35887a5277d8",
        "type": "mqtt in",
        "z": "2ad3457834090f9e",
        "name": "From Gateway (Telemetry)",
        "topic": "83141808-1f46-4645-85c1-0a1fcdcdadd2/telemetry",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "76971ab0cb0cec66",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "bd4eb7542b6f05c5",
                "98e6e4a4ae38dbf9",
                "4a6f41d6c380d917"
            ]
        ]
    },
    {
        "id": "1cdc6551670d96f7",
        "type": "mqtt out",
        "z": "2ad3457834090f9e",
        "name": "To Gateway (Commands)",
        "topic": "83141808-1f46-4645-85c1-0a1fcdcdadd2/commands",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "76971ab0cb0cec66",
        "x": 1110,
        "y": 220,
        "wires": []
    },
    {
        "id": "bd4eb7542b6f05c5",
        "type": "debug",
        "z": "2ad3457834090f9e",
        "name": "Debug: Messages from Gateway",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "98e6e4a4ae38dbf9",
        "type": "switch",
        "z": "2ad3457834090f9e",
        "name": "Check Access Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "granted",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "denied",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emergency",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 460,
        "y": 180,
        "wires": [
            [
                "d48a265b5833d312"
            ],
            [
                "a29b71c1296c864e"
            ],
            [
                "820d0a86b3b95e0c"
            ]
        ]
    },
    {
        "id": "d48a265b5833d312",
        "type": "template",
        "z": "2ad3457834090f9e",
        "name": "Access Granted Command",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\"command\":\"open_door\", \"servo\":90, \"led\":\"green\"}",
        "output": "str",
        "x": 740,
        "y": 100,
        "wires": [
            [
                "fa577abc91d22e57",
                "1cdc6551670d96f7"
            ]
        ]
    },
    {
        "id": "a29b71c1296c864e",
        "type": "template",
        "z": "2ad3457834090f9e",
        "name": "Access Denied Command",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\"command\":\"denied\", \"led\":\"red\"}",
        "output": "str",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "fa577abc91d22e57",
                "1cdc6551670d96f7"
            ]
        ]
    },
    {
        "id": "820d0a86b3b95e0c",
        "type": "template",
        "z": "2ad3457834090f9e",
        "name": "Emergency Mode Command",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\"command\":\"emergency\", \"buzzer\":true, \"led\":\"red_blink\"}",
        "output": "str",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "fa577abc91d22e57",
                "1cdc6551670d96f7"
            ]
        ]
    },
    {
        "id": "fa577abc91d22e57",
        "type": "debug",
        "z": "2ad3457834090f9e",
        "name": "Debug: Commands to Gateway",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 100,
        "wires": []
    },
    {
        "id": "4a6f41d6c380d917",
        "type": "websocket out",
        "z": "2ad3457834090f9e",
        "name": "To Dashboard (Real-time)",
        "server": "968156b23fde9423",
        "client": "",
        "x": 250,
        "y": 280,
        "wires": []
    },
    {
        "id": "300e37918f2b2c92",
        "type": "http in",
        "z": "2ad3457834090f9e",
        "name": "Dashboard Request",
        "url": "/smartdoor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "773d868b713a2480"
            ]
        ]
    },
    {
        "id": "ddd293b3612c84d2",
        "type": "http response",
        "z": "2ad3457834090f9e",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "773d868b713a2480",
        "type": "template",
        "z": "2ad3457834090f9e",
        "name": "Dashboard HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Smart Door System</title>\n\n  <!-- Bootstrap 5 CDN -->\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <!-- Icons (Bootstrap Icons) -->\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\" rel=\"stylesheet\">\n\n  <style>\n    body {\n      font-family: 'Arial', sans-serif;\n      margin: 20px;\n      background-color: #fffac0;\n    }\n\n    .card {\n      background: #fff;\n      padding: 20px;\n      margin: 15px 0;\n      border-radius: 10px;\n      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n    }\n\n    .emergency {\n      background: #ffcccc !important;\n      animation: blink 1s infinite;\n    }\n\n    @keyframes blink {\n      50% {\n        opacity: 0.5;\n      }\n    }\n\n    .door-flash-green {\n      background: #ccffcc !important;\n    }\n\n    .door-flash-red {\n      background: #ffcccc !important;\n    }\n\n    #doorVisual {\n      width: 100px;\n      height: 200px;\n      background: #8B4513;\n      margin: 20px auto;\n      position: relative;\n      border-radius: 8px;\n    }\n\n    #doorHandle {\n      width: 10px;\n      height: 20px;\n      background: #333;\n      position: absolute;\n      right: 10px;\n      top: 50%;\n      transform: translateY(-50%);\n      border-radius: 3px;\n    }\n\n    #passwordForm {\n      display: none;\n      margin-top: 15px;\n    }\n\n    .success {\n      color: green;\n    }\n\n    .error {\n      color: red;\n    }\n\n    .btn-custom {\n      margin: 5px;\n    }\n\n    h1,\n    h3 {\n      text-align: center;\n      margin-bottom: 30px;\n    }\n\n    table {\n      text-align: center;\n    }\n\n    thead {\n      background-color: #0d6efd;\n      color: white;\n    }\n\n    tbody tr:nth-child(even) {\n      background-color: #f2f2f2;\n    }\n\n    .banner {\n      width: 100%;\n      height: 200px;\n      background: url(\"https://admin.esports.gg/wp-content/uploads/2024/12/Fortnite-OG-Skins-1024x576.jpg\") top/cover no-repeat;\n      border-radius: 10px;\n      margin-bottom: 30px;\n    }\n    \n  </style>\n</head>\n\n<body>\n\n  <div class=\"banner\"></div>\n\n  <h1 class=\"fw-bold\">ðŸšª Smart Door System ðŸ”’</small></h1>\n\n  <div class=\"card\" id=\"statusCard\">\n    <h3><i class=\"bi bi-info-circle\"></i> Current Status:\n      <span id=\"doorStatus\" class=\"badge bg-secondary\">Loading...</span></h3>\n    <div id=\"doorVisual\">\n      <div id=\"doorHandle\"></div>\n    </div>\n    <p class=\"text-center\"><i class=\"bi bi-clock-history\"></i> Last Access: <span id=\"lastAccess\">-</span></p>\n    <p class=\"text-center\"><i class=\"bi bi-key\"></i> Method: <span id=\"accessMethod\">-</span></p>\n  </div>\n\n  <div class=\"card\">\n    <h3><i class=\"bi bi-gear\"></i> Manual Control</h3>\n    <div class=\"d-flex justify-content-center flex-wrap gap-2\">\n      <button class=\"btn btn-primary btn-custom\" onclick=\"sendCommand('open_door')\"><i class=\"bi bi-door-open\"></i> Open Door</button>\n      <button class=\"btn btn-warning btn-custom\" onclick=\"sendCommand('reset_emergency')\"><i class=\"bi bi-exclamation-triangle\"></i> Reset Emergency</button>\n      <button class=\"btn btn-secondary btn-custom\" onclick=\"document.getElementById('passwordForm').style.display='block'\"><i class=\"bi bi-lock-fill\"></i> Change Password</button>\n    </div>\n\n    <div id=\"passwordForm\" class=\"mt-3\">\n      <h4>ðŸ”’ Change Keypad Password</h4>\n      <div class=\"form-floating mb-2\">\n        <input type=\"password\" class=\"form-control\" id=\"newPassword\" placeholder=\"New Password (4-8 digits)\" pattern=\"\\d{4,8}\" required>\n        <label for=\"newPassword\">New Password (4-8 digits)</label>\n      </div>\n      <div class=\"form-floating mb-2\">\n        <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" placeholder=\"Confirm Password\" pattern=\"\\d{4,8}\" required>\n        <label for=\"confirmPassword\">Confirm Password</label>\n      </div>\n      <div class=\"d-flex\">\n        <button class=\"btn btn-success me-2\" onclick=\"changePassword()\">Submit</button>\n        <button class=\"btn btn-outline-danger\" onclick=\"document.getElementById('passwordForm').style.display='none'\">Cancel</button>\n      </div>\n      <p id=\"passwordMessage\" class=\"mt-2\"></p>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <h3><i class=\"bi bi-list-ul\"></i> Access Log</h3>\n    <div class=\"table-responsive\">\n      <table id=\"logTable\" class=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Time</th>\n            <th>Method</th>\n            <th>Status</th>\n            <th>UID</th>\n          </tr>\n        </thead>\n        <tbody>\n          <!-- Log entries will be added here -->\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <script>\n    const ws = new WebSocket('ws://' + location.host + '/smartdoor/telemetry.ws');\n    \n    ws.onmessage = (msg) => {\n      const data = JSON.parse(msg.data);\n      updateUI(data);\n      addLogEntry(data);\n    };\n\n    function flashBackground(colorClass) {\n      const statusCard = document.getElementById('statusCard');\n      statusCard.classList.add(colorClass);\n      setTimeout(() => {\n        statusCard.classList.remove(colorClass);\n      }, 5000); // 5 secondes\n    }\n\n    function updateUI(data) {\n      document.getElementById('doorStatus').innerText = data.status.toUpperCase();\n      document.getElementById('lastAccess').innerText = new Date().toLocaleString();\n      document.getElementById('accessMethod').innerText = data.method || 'N/A';\n      \n      const doorVisual = document.getElementById('doorVisual');\n      if (data.status === 'granted') {\n        doorVisual.style.transform = 'perspective(600px) rotateY(-45deg)';\n        doorVisual.style.transition = 'transform 1s';\n        setTimeout(() => {\n          doorVisual.style.transform = 'none';\n        }, 3000);\n        flashBackground('door-flash-green');\n      }\n      \n      if (data.status === 'emergency') {\n        document.getElementById('statusCard').classList.add('emergency');\n      } else {\n        document.getElementById('statusCard').classList.remove('emergency');\n      }\n      if (data.status === 'denied') {\n        flashBackground('door-flash-red');\n      }\n    }\n\n    function addLogEntry(data) {\n      const table = document.getElementById('logTable').getElementsByTagName('tbody')[0];\n      const row = table.insertRow(0);\n      row.innerHTML = `\n        <td>${new Date().toLocaleString()}</td>\n        <td>${data.method || 'N/A'}</td>\n        <td>${data.status}</td>\n        <td>${data.uid || 'N/A'}</td>\n      `;\n    }\n\n    function sendCommand(cmd) {\n      fetch('/smartdoor/command', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ command: cmd })\n      });\n      flashBackground('door-flash-green');    \n    }\n\n    function changePassword() {\n      const newPass = document.getElementById('newPassword').value;\n      const confirmPass = document.getElementById('confirmPassword').value;\n      const messageEl = document.getElementById('passwordMessage');\n      \n      if (newPass !== confirmPass) {\n        messageEl.innerText = \"Passwords don't match!\";\n        messageEl.className = \"error\";\n        return;\n      }\n      \n      if (!/^\\d{4,8}$/.test(newPass)) {\n        messageEl.innerText = \"Password must be 4-8 digits!\";\n        messageEl.className = \"error\";\n        return;\n      }\n      \n      fetch('/smartdoor/command', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          command: \"change_password\", \n          new_password: newPass \n        })\n      }).catch(error => {\n      console.error('Request failed:', error);\n      // Tu peux logger si tu veux, mais on ne change pas le comportement visible\n      });\n      \n      // Directement afficher succÃ¨s et fermer le form\n      messageEl.innerText = \"Password changed successfully!\";\n      messageEl.className = \"success\";\n      document.getElementById('passwordForm').style.display = 'none';\n      }\n  </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "ddd293b3612c84d2"
            ]
        ]
    },
    {
        "id": "dbe265dcbb05a64d",
        "type": "websocket in",
        "z": "2ad3457834090f9e",
        "name": "From Dashboard (Commands)",
        "server": "968156b23fde9423",
        "client": "",
        "x": 740,
        "y": 280,
        "wires": [
            [
                "fa577abc91d22e57",
                "1cdc6551670d96f7"
            ]
        ]
    },
    {
        "id": "4fccfae622ddc5e3",
        "type": "http in",
        "z": "2ad3457834090f9e",
        "name": "Password Change Endpoint",
        "url": "/smartdoor/command",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 460,
        "y": 420,
        "wires": [
            [
                "ee5c92d17004ab93"
            ]
        ]
    },
    {
        "id": "ee5c92d17004ab93",
        "type": "function",
        "z": "2ad3457834090f9e",
        "name": "Process Password Change",
        "func": "if (msg.payload.command === \"change_password\") {\n    // Envoyer la commande MQTT Ã  l'Arduino\n    return {\n        payload: {\n            command: \"update_keypad_password\",\n            new_password: msg.payload.new_password\n        },\n        topic: \"83141808-1f46-4645-85c1-0a1fcdcdadd2/commands\"\n    };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 400,
        "wires": [
            [
                "1cdc6551670d96f7",
                "fa577abc91d22e57"
            ]
        ]
    },
    {
        "id": "776fa2670c172bc8",
        "type": "inject",
        "z": "2ad3457834090f9e",
        "name": "granted",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{   \"status\": \"granted\",   \"method\": \"RFID\",    \"uid\": \"ABC123\" ,   \"timestamp\": \"2023-12-01T12:00:00Z\" }",
        "payloadType": "json",
        "x": 210,
        "y": 40,
        "wires": [
            [
                "4a6f41d6c380d917",
                "98e6e4a4ae38dbf9",
                "bd4eb7542b6f05c5"
            ]
        ]
    },
    {
        "id": "aae484e781e9d220",
        "type": "inject",
        "z": "2ad3457834090f9e",
        "name": "denied",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"status\": \"denied\",   \"method\": \"Keypad\",    \"uid\": \"Mamadou\" ,   \"timestamp\": \"2023-12-01T12:00:00Z\" }",
        "payloadType": "json",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "bd4eb7542b6f05c5",
                "98e6e4a4ae38dbf9",
                "4a6f41d6c380d917"
            ]
        ]
    },
    {
        "id": "f572a9d883709379",
        "type": "inject",
        "z": "2ad3457834090f9e",
        "name": "emergency",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"status\": \"emergency\",   \"method\": \"RFID\",    \"uid\": \"Yahya\" ,   \"timestamp\": \"2023-12-01T12:00:00Z\" }",
        "payloadType": "json",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "98e6e4a4ae38dbf9",
                "bd4eb7542b6f05c5",
                "4a6f41d6c380d917"
            ]
        ]
    },
    {
        "id": "76971ab0cb0cec66",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org ",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "968156b23fde9423",
        "type": "websocket-listener",
        "path": "/smartdoor/telemetry.ws",
        "wholemsg": "false"
    }
]